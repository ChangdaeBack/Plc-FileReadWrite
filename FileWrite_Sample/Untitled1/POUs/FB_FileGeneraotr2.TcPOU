<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.6">
  <POU Name="FB_FileGeneraotr2" Id="{32650f5e-68e3-42e9-86e7-148812a1856e}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_FileGeneraotr2
VAR_INPUT
	bEnable : BOOL;
	sFilePath : STRING(255);
	sFileName : STRING(255);
	bPushNewData : BOOL;
END_VAR
VAR_IN_OUT
	sHeaderLine : STRING(255);
	sData : STRING(255);
END_VAR

VAR_OUTPUT
	bBusy : BOOL;
	bError : BOOL;
	nErrorID : UDINT;
	bWaitingforNewData : BOOL;
END_VAR
VAR
fbEnable : R_TRIG;
	fbStop : F_TRIG;
	fbPushNewData : R_TRIG;
	
	fbFileOpen : FB_FileOpen;(* Opens file *)
	fbFileClose : FB_FileClose;(* Closes file *)
	fbFilePut : FB_FilePuts;

	sCurFileName : STRING(255);
	sFilePathTemp : STRING(255);
	sDataTemp : STRING(255);
	
	hOpenedFile : UINT; (* file Handler *)	
	bEnableLoging : BOOL;
	bNeedInitStopping : BOOL;
	bStoppingLoging : BOOL;
	
	eSeq : (E_INIT,E_OPEN_SOURCEFILE, E_ADD_NEWLINEHEADER, E_WRITE_NEWEVENT, E_OPEN_ERROR,E_CLOSE_ERROR,E_WRITE_ERROR);
	sNetId: T_AmsNetId;
END_VAR
VAR CONSTANT
	(*0A = LF : LineFeed, 0D 0A = CRLF : CarrageReturn LineFeed*)
	cstLineFeed : STRING(2) := '$0A'; //'$0D$0A';
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[fbEnable(CLK := bEnable);
IF fbEnable.Q THEN
	sCurFileName := sFileName;
	
	sFilePathTemp := SEL('\' = RIGHT(sFilePath,1) OR '/' = RIGHT(sFilePath,1), '\',''); (* CONCAT Function 내에 SEL 함수 사용 금지 *)
	fbFileOpen.sPathName := CONCAT(CONCAT(sFilePath,sFilePathTemp), sCurFileName);
	
	fbFileOpen( sNetId := sNetId,
				nMode := FOPEN_MODEAPPEND OR FOPEN_MODETEXT,(* Open file in TEXT mode! *)
				ePath := PATH_GENERIC,
				bExecute := FALSE
				);
				
	fbFileClose(bExecute := FALSE, sNetId := sNetId);
	bEnableLoging := TRUE;
	bNeedInitStopping := FALSE;
	bWaitingforNewData := FALSE;
	
END_IF

fbStop(CLK := bEnable);
IF fbStop.Q THEN
	bEnableLoging := FALSE;
	bNeedInitStopping := TRUE;	
END_IF


IF bEnableLoging THEN
	
	CASE eSeq OF
	E_INIT:
		bError := FALSE;
		nErrorID := 0;
		hOpenedFile := 0;
		
		bBusy := TRUE;
		
		eSeq := E_OPEN_SOURCEFILE;
		
	E_OPEN_SOURCEFILE:
		fbFileOpen(bExecute := TRUE, hFile => hOpenedFile);
		IF fbFileOpen.bError THEN
			bError := fbFileOpen.bError;
			nErrorID := fbFileOpen.nErrId;

			eSeq := E_OPEN_ERROR;

		ELSIF NOT fbFileClose.bBusy AND hOpenedFile <> 0 THEN
			fbFileOpen(bExecute := FALSE );
			
			
			
			bWaitingforNewData := TRUE;//add
			
			
			
			
			eSeq := E_WRITE_NEWEVENT;

		END_IF
	
//	E_ADD_NEWLINEHEADER:
//		IF hOpenedFile <> 0 THEN
//			sDataTemp := CONCAT( sHeaderLine, cstLineFeed);
//			fbFilePut(
//				hFile:= hOpenedFile, 
//				sLine:= sDataTemp, 
//				bExecute:= TRUE, 
//				);
				
//			IF fbFilePut.bError THEN
//				fbFilePut(bExecute := FALSE );
//				bError := fbFilePut.bError;
//				nErrorID := fbFilePut.nErrId;
	
//				eSeq := E_WRITE_ERROR;
	
//			ELSIF NOT fbFilePut.bBusy THEN
//				fbFilePut(bExecute := FALSE );
				
//				bWaitingforNewData := TRUE;
				
//				eSeq := E_WRITE_NEWEVENT;

//			END_IF

//		ELSE
//			eSeq := E_WRITE_ERROR;

//		END_IF
		
	E_WRITE_NEWEVENT:
		fbPushNewData(CLK := bPushNewData);
		IF fbPushNewData.Q THEN
			sDataTemp := CONCAT( sData, cstLineFeed);
			
			bWaitingforNewData := FALSE;
			fbFilePut.bExecute := TRUE;
			
		END_IF
		
		fbFilePut(
			hFile:= hOpenedFile, 
			sLine:= sDataTemp, 
			);
			
		IF fbFilePut.bError THEN
			fbFilePut(bExecute := FALSE );
			bError := fbFilePut.bError;
			nErrorID := fbFilePut.nErrId;

			eSeq := E_WRITE_ERROR;

		ELSIF NOT fbFilePut.bBusy THEN
			fbFilePut(bExecute := FALSE );
			
			bWaitingforNewData := TRUE;

		END_IF
		
	E_OPEN_ERROR,E_CLOSE_ERROR,E_WRITE_ERROR :
		bEnableLoging := FALSE;		
		bNeedInitStopping := TRUE;		

	END_CASE
	
ELSE
	IF bNeedInitStopping THEN
		fbFileOpen(bExecute := FALSE);
		fbFileClose(bExecute := FALSE);
		fbFilePut(bExecute := FALSE);
		
		bWaitingforNewData := FALSE;
		bNeedInitStopping := FALSE;
		bStoppingLoging := TRUE;

	END_IF

	IF bStoppingLoging THEN
		IF hOpenedFile <> 0 THEN
			fbFileClose(hFile := hOpenedFile,bExecute := TRUE);
			IF NOT fbFileClose.bBusy THEN
				fbFileClose(bExecute := FALSE);
				hOpenedFile := 0;

			END_IF
		ELSE
			eSeq := E_INIT;
			
			bStoppingLoging := FALSE;
			bBusy := FALSE;
			
		END_IF
	END_IF
END_IF]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>