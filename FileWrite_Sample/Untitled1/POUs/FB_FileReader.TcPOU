<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.6">
  <POU Name="FB_FileReader" Id="{88384cb2-20ea-48ec-85a4-44588ad66b97}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_FileReader
VAR_INPUT
	sSelectedFile : STRING(70);
	sSelectedDirectory : STRING(170);
	bExecute : BOOL;
END_VAR
VAR_OUTPUT
	bError : BOOL;
	
	(*ADS Error Return code*)
	nErrorID : UDINT;
END_VAR
VAR
	fbFileOpen : FB_FileOpen := (nMode := FOPEN_MODEREAD, ePath := PATH_GENERIC);
	fbFileRead : FB_FileRead;
	fbFileClose : FB_FileClose;
	rTrigExecute : R_TRIG;
	eState : (Init, FileOpening, FileReading, FileClosing, Error);	
	sErrorState : STRING;
	
	sSomethingToRead : STRING(1024);
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[rTrigExecute(CLK:=bExecute);

CASE eState OF
	Init:
		fbFileOpen(bExecute := FALSE);
		fbFileRead(bExecute := FALSE);
		fbFileClose(bExecute := FALSE);
		bError := FALSE;
		nErrorID := 0;
		IF rTrigExecute.Q THEN
			eState:=FileOpening;
			sSomethingToRead := '';
		END_IF
		
	FileOpening:
		fbFileOpen(bExecute := TRUE,
					sPathName := CONCAT(GetDirectoryPath(sSelectedDirectory),GetFileName(sSelectedFile)));
		IF fbFileOpen.bError THEN
			nErrorID := fbFileOpen.nErrId;
			eState := Error;	
			sErrorState := 'FileOpening';
		ELSIF NOT fbFileOpen.bBusy THEN
			fbFileOpen(bExecute := FALSE);
			eState := FileReading;
		END_IF
		

	FileReading:
		fbFileRead(bExecute := TRUE,
					hFile := fbFileOpen.hFile,
					pReadBuff := ADR(sSomethingToRead),
					cbReadLEN := SIZEOF(sSomethingToRead) - 1);
		IF fbFileRead.bError THEN
			nErrorID := fbFileRead.nErrId;
			sErrorState := 'FileReading';
			eState := Error;	
		ELSIF NOT fbFileRead.bBusy THEN
			fbFileRead(bExecute := FALSE);
			eState := FileClosing;
		END_IF
	
	FileClosing:
		fbFileClose(bExecute := TRUE,
					hFile := fbFileOpen.hFile);
		IF fbFileClose.bError THEN
			nErrorID := fbFileClose.nErrId;
			eState := Error;
			sErrorState := 'FileClosing';	
		ELSIF NOT fbFileClose.bBusy THEN
			eState := Init;
		END_IF
	
	Error:
		bError := TRUE;
		IF rTrigExecute.Q THEN
			eState := Init;
		END_IF
END_CASE
]]></ST>
    </Implementation>
    <Method Name="GetDirectoryPath" Id="{8cf6fea6-f63e-449c-b720-9552f5fda666}">
      <Declaration><![CDATA[METHOD PRIVATE GetDirectoryPath : STRING
VAR_INPUT
	sSelectedDirectroy : STRING(170);
END_VAR
VAR
	
END_VAR
VAR CONSTANT
	sCdrive : STRING(3) := 'C:\';
	sSlash : STRING(1) := '/';
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetDirectoryPath := CONCAT(sCdrive, sSelectedDirectroy);
GetDirectoryPath := CONCAT(GetDirectoryPath, sSlash);

(* Return: C:\xxx/ *)]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetFileName" Id="{d76cfa77-ab04-4e4e-b240-90e4a3218807}">
      <Declaration><![CDATA[METHOD PRIVATE GetFileName : STRING
VAR_INPUT
	sSelectedFile : STRING(70);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetFileName := DELETE(sSelectedFile,2,LEN(sSelectedFile)-1);
GetFileName := DELETE(GetFileName,2,1);]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>